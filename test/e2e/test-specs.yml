description: Newrelic Prometheus Configurator E2E Test

custom_test_key: cluster_name

scenarios:
  - description: Scrape test environment metrics
    before:
      - cd ../../ && NR_PROM_LICENSE_KEY=${LICENSE_KEY} NR_PROM_CLUSTER=${SCENARIO_TAG} make tilt-ci
    after:
      - kubectl logs -l app.kubernetes.io/name=newrelic-prometheus-agent --all-containers --prefix=true
      - kubectl get all -o wide
      - cd ../../ && tilt down
    tests:
      metrics:
        - source: "metrics.yml"
  - description: Scrape test environment metrics from 7 replicas
    before:
      - cd ../../ && NR_PROM_LICENSE_KEY=${LICENSE_KEY} NR_PROM_CLUSTER=${SCENARIO_TAG} make tilt-ci HELM_VALUES_FILE="./test/e2e/values-multi-shards.yaml"
    after:
      - kubectl logs -l app.kubernetes.io/name=newrelic-prometheus-agent --all-containers --prefix=true
      - kubectl get all -o wide
      - cd ../../ && tilt down
    tests:
      metrics:
        - source: "metrics.yml"
  - description: Scrape test environment metrics from integration filters only
    before:
      - cd ../../ && NR_PROM_LICENSE_KEY=${LICENSE_KEY} NR_PROM_CLUSTER=${SCENARIO_TAG} make tilt-ci HELM_VALUES_FILE="./test/e2e/values-integration-filters.yaml"
    after:
      - kubectl logs -l app.kubernetes.io/name=newrelic-prometheus-agent --all-containers --prefix=true
      - kubectl get all -o wide
      - cd ../../ && tilt down
    tests:
      metrics:
        - source: "metrics-integration-filters.yml"
      # Note that since we are checking for missing metrics the test make sense merely if before we check that all metrics were there.
      # we do both with nrqls and the standard metric source.
      nrqls:
        - query: "FROM Metric select metricName  where collector_type = 'integration-filters' and service = 'test-resources-endpoints'"
          error_expected: false #In this case we expect the metrics thanks to the newrelic.io/scrape=true
        - query: "FROM Metric select metricName  where collector_type = 'integration-filters' and service = 'test-resources-openmetrics'"
          error_expected: true
        - query: "FROM Metric select metricName  where collector_type = 'integration-filters' and service = 'kube-dns'"
          error_expected: true
        # metric type relabelling, the metric name is wrong, but since the prefix matches timeseries_write_* we expect it as a counter
        - query: "FROM Metric select metricName where collector_type = 'integration-filters' and metricName = 'timeseries_write_test' and getField(timeseries_write_test,'type') = 'count'"
          error_expected: false #In this case we expect the metrics thanks to the newrelic.io/scrape=true
