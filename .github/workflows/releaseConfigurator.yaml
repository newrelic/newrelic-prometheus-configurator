name: Configurator Release

# This workflow manually triggers the automated process of release based on the changelog.
# Is recommended to run `make release-changelog` before to see an example of what is going to be generated.

# IMPORTANT No matter the branch selected when triggered, the workflow will always execute on default branch.

# tmp disabling this workflow to test reusable workflows instead
# on:
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Release version including "v" prefix eg: v0.0.1 (Optional)'
#         required: false
#         type: string

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.next-version }}
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
      - name: Check is triggered for default branch
        run: |
          if [ ${GITHUB_REF_NAME} != ${{ github.event.repository.default_branch }} ] || [ ${GITHUB_REF_TYPE} != "branch" ];then
            echo This workflow should only be triggered for the '${{ github.event.repository.default_branch }}' branch
            exit 1
          fi
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}
          token: "${{ secrets.COREINT_BOT_TOKEN }}"
      - uses: newrelic/release-toolkit/validate-markdown@v1
      - uses: newrelic/release-toolkit/generate-yaml@v1
        with:
          excluded-dirs: charts,.github
      - uses: newrelic/release-toolkit/link-dependencies@v1
        with:
          dictionary: .github/rt-dictionary.yaml
      - uses: newrelic/release-toolkit/next-version@v1
        id: version
        env:
          # if specified this version will be used instead
          NEXT: "${{ inputs.version }}"
      - id: image-tag
        run: |
          echo tag=$(echo "${{ steps.version.outputs.next-version }}" | sed 's/^v//') >> $GITHUB_OUTPUT
      - name: Configure Git
        run: |
          git config user.name newrelic-coreint-team
          git config user.email coreint-dev@newrelic.com
      - uses: newrelic/release-toolkit/update-markdown@v1
        with:
          version: ${{ steps.version.outputs.next-version }}
      - name: Commit updated changelog
        run: |
          git add CHANGELOG.md
          git commit -m "Update changelog with changes from ${{ steps.version.outputs.next-version }}"
          git push -u origin ${{ github.event.repository.default_branch }}
      - uses: newrelic/release-toolkit/render@v1
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.next-version }} --target $(git rev-parse HEAD) --notes-file CHANGELOG.partial.md

  build-push:
    name: Build and Push images to Docker Hub
    needs: release
    uses: ./.github/workflows/_push_image.yaml
    with:
      version: ${{needs.release.outputs.version}} 
      image-tag: ${{needs.release.outputs.image-tag}} 
      push-latest: true
    secrets: inherit
