name: Configurator Release

# This workflow manually triggers the automated process of release based on the changelog and also runs on a schedule.
# Is recommended to run `make release-changelog` before to see an example of what is going to be generated.

# IMPORTANT No matter the branch selected when triggered, the workflow will always execute on default branch.

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version including "v" prefix eg: v0.0.1 (Optional)'
        required: false
        type: string
  schedule:
    - cron: "0 12 * * 1" # Monday at 12pm UTC or 5am PT

env:
  ORIGINAL_REPO_NAME: ${{ github.event.repository.full_name }}
  CHART_DIRECTORY: charts/newrelic-prometheus-agent

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.next-version }}
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
      - name: Check is triggered for default branch
        run: |
          if [ ${GITHUB_REF_NAME} != ${{ github.event.repository.default_branch }} ] || [ ${GITHUB_REF_TYPE} != "branch" ];then
            echo This workflow should only be triggered for the '${{ github.event.repository.default_branch }}' branch
            exit 1
          fi
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}
          token: "${{ secrets.K8S_AGENTS_BOT_TOKEN }}"
      - uses: newrelic/release-toolkit/validate-markdown@v1
      - uses: newrelic/release-toolkit/generate-yaml@v1
        with:
          excluded-dirs: charts,.github
      - uses: newrelic/release-toolkit/link-dependencies@v1
        with:
          dictionary: .github/rt-dictionary.yaml
      - uses: newrelic/release-toolkit/next-version@v1
        id: version
        env:
          # if specified this version will be used instead
          NEXT: "${{ inputs.version }}"
      - id: image-tag
        run: |
          echo tag=$(echo "${{ steps.version.outputs.next-version }}" | sed 's/^v//') >> $GITHUB_OUTPUT
      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      - uses: newrelic/release-toolkit/update-markdown@v1
        with:
          version: ${{ steps.version.outputs.next-version }}
      - name: Commit updated changelog
        run: |
          git add CHANGELOG.md
          git commit -m "Update changelog with changes from ${{ steps.version.outputs.next-version }}"
          git push -u origin ${{ github.event.repository.default_branch }}
      - uses: newrelic/release-toolkit/render@v1
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.next-version }} --target $(git rev-parse HEAD) --notes-file CHANGELOG.partial.md

  build-push:
    name: Build and Push images to Docker Hub
    needs: release
    uses: ./.github/workflows/_push_image.yaml
    with:
      version: ${{needs.release.outputs.version}} 
      image-tag: ${{needs.release.outputs.image-tag}} 
      push-latest: true
    secrets: inherit

  open-pr:
    name: Update version and open pr
    needs: [ build-push ]
    runs-on: ubuntu-latest
    # run only for releases (not prereleases)
    if: ${{ ! github.event.release.prerelease }}
    steps:
      - name: Checkout input repo
        uses: actions/checkout@v4
        with:
          repository: newrelic/newrelic-prometheus-configurator
          ref: main

      - name: Find new configuratorVersion
        id: find-version
        run: |
          echo "NEW_CONFIG_VERSION=${{needs.release.outputs.image-tag}} " >> $GITHUB_ENV
          echo "new configurator version: $NEW_CONFIG_VERSION"

      - name: Find current configuratorVersion
        id: original_version
        run: |
          ORIGINAL_CONFIG_VERSION=$(yq eval '.configuratorVersion' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "original configurator version: $ORIGINAL_CONFIG_VERSION"
          echo "ORIGINAL_CONFIG_VERSION=$ORIGINAL_CONFIG_VERSION" >> $GITHUB_ENV

      - name: Find current helm chart version
        run: |
          CURRENT_VERSION=$(yq eval '.version' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Set up Golang
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.11

      - name: Checkout version-update.go app
        uses: actions/checkout@v4
        with:
          repository: newrelic/k8s-metadata-injection
          path: tools
          ref: main
          sparse-checkout: |
            version-update.go
          sparse-checkout-cone-mode: false

      - name: List files
        run: ls -la

      - name: Find next helm chart version
        run: |
          NEXT_VERSION=$(go run ./tools/src/utils/version-update.go "$CURRENT_VERSION" "$ORIGINAL_CONFIG_VERSION" "$NEW_CONFIG_VERSION")
          echo "Next helm chart version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Update version helm chart
        # fail the workflow if newVersion is "error", otherwise set the new versions and continue with opening pr
        run: |
          if [ "${NEXT_VERSION}" != 'error' ]; then
            echo "new version to set: ${NEXT_VERSION}"
            yq eval --inplace ".version=\"${NEXT_VERSION}\"" "${{ env.CHART_DIRECTORY }}/Chart.yaml"
          else
            echo "Error: newVersion is 'error'."
            exit 1
          fi

      - name: Install Helm Docs
        run: |
          wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
          tar --extract --verbose --file helm-docs_1.11.0_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/sbin

      - name: Run Helm Docs
        run: |
          helm-docs

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      
      - name: Commit Changes
        run: |
          git checkout -b update-chart-version-${{ github.sha }}
          git branch --all
          git add ${{ inputs.chart_directory }}/Chart.yaml
          git add ${{ inputs.chart_directory }}/README.md
          git commit --message="Bump versions and update docs"
      
      - name: Push Changes
        run: git push origin update-chart-version-${{ github.sha }}

      - name: Open pull request
        run: gh pr create -B main -H update-chart-version-${{ github.sha }} --title 'Bump version and update docs' --body 'Bump version and results of running helm docs as part of release automation.'
        env:
            GITHUB_TOKEN: ${{ secrets.gh_token }}

  notify-failure:
    if: ${{ always() && failure() }}
    needs: [release, build-push, open-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure via Slack
        uses: archive/github-actions-slack@b91c7e2ff3852411ad4fbdad441a8133221ac86e
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.K8S_AGENTS_SLACK_TOKEN }}
          slack-channel: ${{ secrets.K8S_AGENTS_SLACK_CHANNEL }}
          slack-text: "‚ùå `${{ env.ORIGINAL_REPO_NAME }}`: <${{ github.server_url }}/${{ env.ORIGINAL_REPO_NAME }}/actions/runs/${{ github.run_id }}|release pipeline failed>."

