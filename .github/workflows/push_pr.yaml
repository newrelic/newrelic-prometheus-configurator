name: Push/PR pipeline
on:
  pull_request:
  push:
    branches:
      - main

env:
  # NOTICE that apart from this, the versions in the chart linter matrix needs to be bumped too.
  LATEST_K8S_VERSION: 'v1.24.4'
  MINIKUBE_VERSION: 'v1.26.1'

jobs:
  chart-lint:
    name: Helm chart Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        kubernetes-version: [ "v1.16.15", "v1.24.4" ]
    steps:
      - uses: azure/setup-helm@v3
        with:
          version: 'v3.0.0'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: helm/chart-testing-action@v2.2.1

      - name: Lint charts
        run: ct --config .github/ct.yaml lint --debug

      - name: Check for changed installable charts
        id: list-changed
        run: |
          changed=$(ct --config .github/ct.yaml list-changed)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
      - name: Run helm unit tests
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          helm plugin install https://github.com/quintush/helm-unittest

          for chart in $(ct --config .github/ct.yaml list-changed); do
            if [ -d "$chart/tests/" ]; then
              helm unittest -3 $chart
            else
              echo "No unit tests found for $chart"
            fi
          done
      - uses: actions/setup-go@v3
        if: steps.list-changed.outputs.changed == 'true'
        with:
          go-version-file: 'go.mod'
      - name: Check README.md is up to date
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          go install github.com/norwoodj/helm-docs/cmd/helm-docs@v1.11.0
          make build-chart-docs
          if [ ! -z "$(git status --porcelain)" ]; then 
            git diff
            exit 1
          fi
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.6.0
        if: steps.list-changed.outputs.changed == 'true'
        with:
          minikube version: ${{ env.MINIKUBE_VERSION }}
          kubernetes version: ${{ matrix.kubernetes-version }}
          github token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create image for chart testing
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          make build-multiarch
          GOOS=linux GOARCH=amd64 DOCKER_BUILDKIT=1 docker build -t ct/prometheus-configurator:ct  .
          minikube image load ct/prometheus-configurator:ct
          kubectl create ns ct
      - name: Test install charts
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --namespace ct --config .github/ct.yaml --debug
      # TODO: enable upgrade check once chart and values are considered stable
      #- name: Test upgrade charts
      #  if: steps.list-changed.outputs.changed == 'true'
      #  run: ct install --namespace ct --config .github/ct.yaml --debug --upgrade

  e2e-test:
    name: E2e Tests 
    runs-on: ubuntu-latest
    # If the environment is broken this job could timeout since the default timeout for tilt ci is 30m.
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.6.0
        with:
          minikube version: ${{ env.MINIKUBE_VERSION }}
          kubernetes version: ${{ env.LATEST_K8S_VERSION }}
          # default driver doesn't support 'eval $$(minikube docker-env)'.
          driver: docker
          github token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: Install Tilt
        run: |
          curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
      - name: Run e2e-test
        uses: newrelic/newrelic-integration-e2e-action@v1
        with:
          retry_seconds: 60
          retry_attempts: 5
          agent_enabled: false
          spec_path: test/e2e/test-specs.yml
          account_id: ${{ secrets.COREINT_E2E_ACCOUNT_ID }}
          api_key: ${{ secrets.COREINT_E2E_API_KEY }}
          license_key: ${{ secrets.COREINT_E2E_LICENSE_KEY }}

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run unit tests
        run: make test
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.6.0
        with:
          minikube version: ${{ env.MINIKUBE_VERSION }}
          kubernetes version: ${{ env.LATEST_K8S_VERSION }}
          github token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run integration tests
        run: make integration-test

  static-analysis:
    name: Static analysis and linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - uses: newrelic/newrelic-infra-checkers@v1
        with:
          golangci-lint-config: golangci-lint
      - name: Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          auditOn: push
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        continue-on-error: ${{ github.event_name != 'pull_request' }}
        with:
          args: --verbose
      - name: Prometheus versions match
        run: make check-prometheus-version

      # TODO Check is failing, for some reason the generated file does not contain
      # some of the indirect dependencies.
      # - name: Check THIRD_PARTY_NOTICES.md is up to date
      #   run: |
      #     go install go.elastic.co/go-licence-detector@v0.5.0
      #     make build-license-notice
      #     if [ ! -z "$(git status --porcelain)" ]; then 
      #       git diff
      #       exit 1
      #     fi

  codespell:
    name: Codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Codespell test
        uses: codespell-project/actions-codespell@master
        with:
          skip: go.mod,go.sum
