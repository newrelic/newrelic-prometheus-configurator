# -- Override the name of the chart
nameOverride: ""
# -- Override the full name of the release
fullnameOverride: ""

# -- Name of the Kubernetes cluster monitored. Can be configured also with `global.cluster`
cluster: ""
# -- This set this license key to use. Can be configured also with `global.licenseKey`
licenseKey: ""
# -- In case you don't want to have the license key in you values, this allows you to point to a user created secret to get the key from there. Can be configured also with `global.customSecretName`
customSecretName: ""
# -- In case you don't want to have the license key in you values, this allows you to point to which secret key is the license key located. Can be configured also with `global.customSecretLicenseKey`
customSecretLicenseKey: ""

images:
  # -- The secrets that are needed to pull images from a custom registry.
  pullSecrets: []

  configurator:
    registry: ""
    repository: newrelic/prometheus-configurator
    pullPolicy: IfNotPresent
    tag: ""
  prometheus:
    registry: ""
    repository: quay.io/prometheus/prometheus
    pullPolicy: IfNotPresent
    tag: v2.36.2

# -- Settings controlling ServiceAccount creation.
# @default -- See `values.yaml`
serviceAccount:
  # -- Whether the chart should automatically create the ServiceAccount objects required to run.
  create: true
  annotations: {}
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Additional labels for chart objects. Can be configured also with `global.labels`
labels: {}
# -- Annotations to be added to all pods created by the integration.
podAnnotations: {}
# -- Additional labels for chart pods. Can be configured also with `global.podLabels`
podLabels: {}

# -- Sets pod's priorityClassName. Can be configured also with `global.priorityClassName`
priorityClassName: ""
# -- (bool) Sets pod's hostNetwork. Can be configured also with `global.hostNetwork`
# @default -- `false`
hostNetwork:
# -- Sets security context (at pod level). Can be configured also with `global.podSecurityContext`
podSecurityContext: {}
# -- Sets security context (at container level). Can be configured also with `global.containerSecurityContext`
containerSecurityContext: {}

# -- Sets pod's dnsConfig. Can be configured also with `global.dnsConfig`
dnsConfig: {}

# -- Settings controlling RBAC objects creation.
rbac:
  # -- Whether the chart should automatically create the RBAC objects required to run.
  create: true
  # -- Whether the chart should create Pod Security Policy objects.
  pspEnabled: false

# -- Sets pod/node affinities set almost globally. (See [Affinities and tolerations](README.md#affinities-and-tolerations))
affinity: {}
# -- Sets pod's node selector almost globally. (See [Affinities and tolerations](README.md#affinities-and-tolerations))
nodeSelector: {}
# -- Sets pod's tolerations to node taints almost globally. (See [Affinities and tolerations](README.md#affinities-and-tolerations))
tolerations: []

# -- (bool) Send the metrics to the staging backend. Requires a valid staging license key. Can be configured also with `global.nrStaging`
# @default -- `false`
nrStaging:

# -- New Relic prometheus configuration.
# TODO: we need to set default values only when those values are not the same than prometheus agent defaults'.
config: {}
# TODO: it needs to be completed with all configurator sections and be documented properly
# config:
#  common:
#    The labels to add to any timeseries that this Prometheus instance scrapes.
#    external_labels:
#      one: two
#    How frequently to scrape targets by default.
#    scrape_interval: 1m
#    The default timeout when scraping targets.
#    scrape_timeout: 10s

#  newrelic_remote_write:
#    extra_write_relabel_configs: []
#    proxy_url: ""
#    remote_timeout: 30s
#    # prometheus tls_config setup, see <https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config> for details.
#    tls_config:
#    # queue_config setup, see prometheus remote-write tuning <https://prometheus.io/docs/practices/remote_write/#remote-write-tuning>
#    # for a more detailed explanation.
#    queue_config:
#       # Number of samples to buffer per shard before we block reading of more
#       # samples from the WAL. It is recommended to have enough capacity in each
#       # shard to buffer several requests to keep throughput up while processing
#       # occasional slow remote requests.
#       capacity: 2500
#       # Maximum number of shards, i.e. amount of concurrency.
#       max_shards: 200
#       # Minimum number of shards, i.e. amount of concurrency.
#       min_shards: 1
#       # Maximum number of samples per send.
#       max_samples_per_send: 500
#       # Maximum time a sample will wait in buffer.
#       batch_send_deadline: 5s
#       # Initial retry delay. Gets doubled for every retry.
#       min_backoff: 30ms
#       # Maximum retry delay.
#       max_backoff: 5s
#       # Retry upon receiving a 429 status code from the remote-write storage.
#       retry_on_http_429: false
#  extra_remote_write: []
#  static_targets:
#    - job_name: ""
#      targets: []
#      labels: {}
#      metrics_path: /metrics
#      honor_labels: true
#      honor_timestamps: true
#      params: {}
#      scheme: "http"
#      body_size_limit: 0
#      sample_limit: 0
#      target_limit: 0
#      label_limit: 0
#      label_name_length_limit: 0
#      label_value_length_limit: 0
#      scrape_interval: 30s
#      scrape_timeout: 30s
#      tls_config:
#      # Sets the `Authorization` header on every scrape request
#      authorization:
#      extra_relabel_config: []
#      extra_metric_relabel_config: []
#  extra_scrape_configs: {}
